import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Enumeration;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class ActualizarCochesServlet extends HttpServlet {

	private static final long serialVersionUID = 1L; // Sirve para definir un id que sera usado por la virtual machine
													 // cuando serializa y deserealiza

	public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		ejecutar(request, response);
	}

	public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		ejecutar(request, response);
	}

	private void ejecutar(HttpServletRequest request, HttpServletResponse response) throws IOException {
		
		response.sendRedirect("Editar.html");
		
 		try{
 			
 			//********* trozo que sirve para editar ***********************************************
			Class.forName("com.mysql.jdbc.Driver"); //Carga
			Connection conexion = DriverManager.getConnection("jdbc:mysql://localhost/japancarmm", "root", ""); // Para crear una conexión a la base de datos
			Statement st = conexion.createStatement(); // Se utiliza para crear un objeto que modela a una sentencia SQL. Es un objeto del tipo de una clase que implementa la interfaz Statement, y proveer la infraestructura para ejecutar sentencias SQL sobre una conexión con una base de datos
			response.setContentType("text/html"); // Mostrar por web (no por console)
			PrintWriter out = response.getWriter();
  			String sql = "UPDATE coches SET isbn=[1], marca='[2]', modelo='[3]', acabado='[4]', n_de_puertas='[5]', tipo_de_carroceria='[6]', cambio='[7]' , combustible='[8]' , potencia_cv='[9]' , consumo_medio_l='[10]' , longitud_mm='[11]' , anchura_mm='[12]' , altura_mm='[13]' , maletero_l='[14]', garantia_a='[15]' , precio_euros='[16]' where isbn= '[17]'"; // editar base de datos
  			sql = sql.replace("[1]", request.getParameter("isbn"));
  			sql = sql.replace("[2]", request.getParameter("marca"));
  			sql = sql.replace("[3]", request.getParameter("modelo"));
  			sql = sql.replace("[4]", request.getParameter("acabado"));
  			sql = sql.replace("[5]", request.getParameter("n_de_puertas"));
  			sql = sql.replace("[6]", request.getParameter("tipo_de_carroceria"));
  			sql = sql.replace("[7]", request.getParameter("cambio"));
  			sql = sql.replace("[8]", request.getParameter("combustible"));
  			sql = sql.replace("[9]", request.getParameter("potencia_cv"));
  			sql = sql.replace("[10]", request.getParameter("consumo_medio_l"));
  			sql = sql.replace("[11]", request.getParameter("longitud_mm"));
  			sql = sql.replace("[12]", request.getParameter("anchura_mm"));
  			sql = sql.replace("[13]", request.getParameter("altura_mm"));
  			sql = sql.replace("[14]", request.getParameter("maletero_l"));
  			sql = sql.replace("[15]", request.getParameter("garantia_a"));
  			sql = sql.replace("[16]", request.getParameter("precio_euros"));
  			sql = sql.replace("[17]", request.getParameter("isbn"));
  			System.out.println("sql->" + sql);	
			st.executeUpdate(sql); // Ejecuta la instrucción SQL determinada, que puede ser una instrucción INSERT, UPDATE o DELETE; o una instrucción SQL que no devuelve nada, como una instrucción DDL de SQL	

   			out.println("</table>");
  		 			
		//	RequestDispatcher rd2 = getServletContext().getRequestDispatcher("/GestionCoches.jsp");
		//	rd2.forward(request, response);
    
		} catch (Exception e) {
			// Error en algún momento
			response.setContentType("text/html"); // Mostrar por web (no por console)
			PrintWriter out5 = response.getWriter();
			out5.println("Excepción " + e);
			e.printStackTrace();
		} 
 		
		System.out.println("editar");
		
		}
		

}

